"""
Copyright (c) Simon Schug
All rights reserved.

MIT License

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
"""
import abc
import math
from operator import add, floordiv
from typing import Optional, Union

import haiku as hk
import jax.numpy as jnp
import jax.tree_util as jtu

from jax_hypernetwork.embedding import Embedding
from jax_hypernetwork.pytree import is_tuple_of_ints
from jax_hypernetwork.pytree import PytreeReshaper


class Hypernetwork(abc.ABC, hk.Module):
    """
    Abstract base class for all Hypernetworks.

    Args:
        params_target: dictionary with the params to be generated by the hypernetwork
        chunk_shape: the shape of a single chunk the weight_generator generates.
            The chunk shape needs to divide all target_shapes without remainder.
            For example if params_target have shapes=[(1, 50), (50, 50)],
            then valid chunk_shapes would be chunk_shape=(1, 50), chunk_shape=(1, 1)
            but chunk_shape != (3, 50) or chunk_shape != (50, 3) would be invalid.
            If set to `None`, the hypernetwork doesn't use chunking.
        embedding_dim: the embedding dimension
    """

    def __init__(
        self,
        params_target: dict,
        chunk_shape: Union[tuple, None],
        embedding_dim: int,
        name: Optional[str] = None,
    ):
        super().__init__(name=name)
        self.params_shape = jtu.tree_map(jnp.shape, params_target)
        self.chunk_shape = chunk_shape
        self.embedding_dim = embedding_dim
        self.num_chunks, self.dim_chunks = Hypernetwork.get_chunk_sizes(
            self.params_shape, self.chunk_shape
        )
        self.reshaper = PytreeReshaper(self.params_shape)

    @abc.abstractproperty
    def weight_generator(self):
        """
        Source network to generate the params.
        The output dimension should equal `self.dim_chunks`
        """
        pass

    @property
    def embedding(self):
        return Embedding(self.num_chunks, self.embedding_dim)

    @staticmethod
    def get_chunk_sizes(params_shape: dict, chunk_shape: tuple):
        if chunk_shape is None:
            # No chunking means all params are generated at once
            num_chunks = 1
            dim_chunks_tree = jtu.tree_map(math.prod, params_shape, is_leaf=is_tuple_of_ints)
            dim_chunks = jtu.tree_reduce(add, dim_chunks_tree, is_leaf=is_tuple_of_ints)

        else:
            # Assuming chunk sizes divides all param shapes without remainder
            def num_chunks_fn(shape):
                return math.prod(jtu.tree_map(floordiv, shape, chunk_shape))

            num_chunks_tree = jtu.tree_map(num_chunks_fn, params_shape, is_leaf=is_tuple_of_ints)
            num_chunks = jtu.tree_reduce(add, num_chunks_tree)
            dim_chunks = math.prod(chunk_shape)

        return num_chunks, dim_chunks

    def __call__(self):
        params_flat = hk.vmap(self.weight_generator, split_rng=False)(self.embedding())

        return self.reshaper(params_flat.reshape(-1))


class LinearHypernetwork(Hypernetwork):
    @property
    def weight_generator(self):
        return hk.Linear(self.dim_chunks)


class MLPHypernetwork(Hypernetwork):
    def __init__(self, params_shape, chunk_shape, embedding_dim, hidden_dims, name=None):
        super().__init__(params_shape, chunk_shape, embedding_dim, name)
        self.hidden_dims = hidden_dims

    @property
    def weight_generator(self):
        return hk.nets.MLP(self.hidden_dims + [self.dim_chunks])
